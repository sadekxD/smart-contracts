// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ERC721A.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol"; 
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

contract Satoshi is ERC721A, Ownable {
    using Strings for uint256;

    string public baseURI;
    string public baseExtension = ".json";
    bool public presale = true;
    bool public publicSale = true;
    bytes32 public merkleRoot;
    uint256 public maxSupply = 5000;
    uint256 public presaleCost = 0 ether;
    uint256 public publicCost = 0 ether;


    constructor(string memory _initBaseURI, uint256 quantity) ERC721A("Test Contract", "TC") {
        setBaseURI(_initBaseURI);
        _safeMint(msg.sender, quantity);
    }

    // whitelist mint
    function whitelistMint(uint256 quantity, bytes32[] calldata _merkleProof)
        public
        payable
    {
        require(presale, "The whitelist sale is not enabled!"); 
        uint256 supply = totalSupply();
        require(quantity > 0, "Quantity Must Be Higher Than Zero");
        require(supply + quantity <= maxSupply, "Max Supply Reached");
        require(msg.value >= presaleCost * quantity, "Not enough ether!");
        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
        require(
            MerkleProof.verify(_merkleProof, merkleRoot, leaf),
            "Invalid proof!"
        );

        _safeMint(msg.sender, quantity);
    }

    // public mint
    function mint(uint256 quantity) external payable {
        require(publicSale, "The public sale is not enabled!");
        uint256 supply = totalSupply();
        require(quantity > 0, "Quantity Must Be Higher Than Zero!");
        require(supply + quantity <= maxSupply, "Max Supply Reached!");

        if (msg.sender != owner()) {
            require(msg.value >= publicCost * quantity, "Not enough ether!");
        }

        if (supply < 10) {
            _safeMint(msg.sender, quantity * 3);
        } else if (supply < 20) {
            _safeMint(msg.sender, quantity * 2);
        } else {
            _safeMint(msg.sender, quantity);
        }
    }

    // public mint 2
    // function mint(uint256 quantity) external payable {
    //     uint256 supply = totalSupply();
    //     require(!paused, "The contract is paused!");
    //     require(!whitelistEnabled, "Public mint is disable!");
    //     require(quantity > 0, "Quantity Must Be Higher Than Zero!");
    //     require(supply + quantity <= maxSupply, "Max Supply Reached!");

    //     if (msg.sender != owner()) {
    //         require(msg.value >= publicCost * quantity, "Not enough ether!");
    //     }

      
    //     _safeMint(msg.sender, quantity);
    // }

    function devMint(uint256 quantity) external onlyOwner {
        uint256 supply = totalSupply();
        require(quantity > 0, "Quantity Must Be Higher Than Zero!");
        require(supply + quantity <= maxSupply, "Max Supply Reached!");
        _safeMint(msg.sender, quantity);
    }

    // internal
    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        string memory currentBaseURI = _baseURI();

        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        tokenId.toString(),
                        baseExtension
                    )
                )
                : "";
    }

    function setMaxSupply(uint256 _amount) public onlyOwner {
        maxSupply = _amount;
    }

    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
        merkleRoot = _merkleRoot;
    }

    function setSale(bool _presale, bool _publicSale) public onlyOwner {
        presale = _presale;
        publicSale = _publicSale;
    }

    function setPrice(uint256 _whitelistCost, uint256 _publicCost) public onlyOwner {
        presaleCost = _whitelistCost;
        publicCost = _publicCost;
    }

    function setBaseURI(string memory _newBaseURI) public onlyOwner {
        baseURI = _newBaseURI;
    }

    function airdropNFTs(uint256 quantity, address _address) public onlyOwner {
        _safeMint(_address, quantity);
    }

    function setBaseExtension(string memory _newBaseExtension)
        public
        onlyOwner
    {
        baseExtension = _newBaseExtension;
    }

    function withdraw() public onlyOwner {
        (bool ts, ) = payable(owner()).call{value: address(this).balance}("");
        require(ts);
    }
}