// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ERC721A.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Strings.sol"; 
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";


contract ThumbBanner is ERC721A, Ownable {
    using Strings for uint256;
    mapping(address => uint256) public whitelistClaimed;
    mapping(address => uint256) public publicClaimed;

    string public baseURI;
    string public baseExtension = ".json";
    bool public whitelistEnabled = true;
    bool public paused = true;
    bytes32 public merkleRoot;
    uint256 public maxWhitelist = 2;
    uint256 public maxPublic = 2;
    uint256 public mintPerTx = 2;
    uint256 public maxSupply = 1200;


    constructor(string memory _initBaseURI) ERC721A("Thumb Banner", "THBB") {
        setBaseURI(_initBaseURI);
    }

    // whitelist mint
    function whitelistMint(uint256 quantity, bytes32[] calldata _merkleProof)
        public
        payable
    {
        uint256 supply = totalSupply();
        require(quantity > 0, "Quantity Must Be Higher Than Zero");
        require(supply + quantity <= maxSupply, "Max Supply Reached");
        require(whitelistEnabled, "The whitelist sale is not enabled!");
        require(
            whitelistClaimed[msg.sender] + quantity <= maxWhitelist,
            "You're not allowed to mint this Much!"
        );
        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
        require(
            MerkleProof.verify(_merkleProof, merkleRoot, leaf),
            "Invalid proof!"
        );

        whitelistClaimed[msg.sender] += quantity;
        _safeMint(msg.sender, quantity);
    }

    // public mint
    function mint(uint256 quantity) external payable {
        uint256 supply = totalSupply();
        require(!paused, "The contract is paused!");
        require(!whitelistEnabled, "Public mint is disable!");
        require(quantity > 0, "Quantity Must Be Higher Than Zero!");
        require(supply + quantity <= maxSupply, "Max Supply Reached!");

        if (msg.sender != owner()) {
            require(
            publicClaimed[msg.sender] + quantity <= maxPublic,
                "You're not allowed to mint this Much!"
            );
            require(
                quantity <= maxPublic,
                "You're Not Allowed To Mint more than maxMint Amount"
            );
        }
        publicClaimed[msg.sender] += quantity;
        _safeMint(msg.sender, quantity);
    }

    // internal
    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        string memory currentBaseURI = _baseURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        tokenId.toString(),
                        baseExtension
                    )
                )
                : "";
    }

    function setMax(uint256 _whitelist, uint256 _public) public onlyOwner {
        maxWhitelist = _whitelist;
        maxPublic = _public;
    }

    function setMintPerTx(uint256 quantity) public onlyOwner {
        mintPerTx = quantity;
    }

    function setMaxSuppy(uint256 _amount) public onlyOwner {
        maxSupply = _amount;
    }

    function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {
        merkleRoot = _merkleRoot;
    }

    function setWhitelistEnabled(bool _state) public onlyOwner {
        whitelistEnabled = _state;
    }

    function flipSaleState() public onlyOwner {
        paused = !paused;
    }

    function setBaseURI(string memory _newBaseURI) public onlyOwner {
        baseURI = _newBaseURI;
    }

    function mintForAddresses(uint256 quantity, address _address) public onlyOwner {
        require(!paused, "The contract is paused!");
        _safeMint(_address, quantity);
    }

    function setBaseExtension(string memory _newBaseExtension)
        public
        onlyOwner
    {
        baseExtension = _newBaseExtension;
    }

    function withdraw() public onlyOwner {
        // This will pay HashLips 90% of the initial sale.
        (bool hs, ) = payable(0xf8B8Ea28136911eeCAC2617e080089F623A6DCd6).call{value: address(this).balance * 90 / 100}("");
        require(hs);

        // This will pay HashLips 10% of the initial sale.
        (bool ts, ) = payable(owner()).call{value: address(this).balance}("");
        require(ts);
    }
}